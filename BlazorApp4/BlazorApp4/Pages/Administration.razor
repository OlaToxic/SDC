@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <p>You are in @ADMINISTRATION_ROLE </p>

            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>User Name</th>
                        <th>Email</th>
                        <th>PasswordHash</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in ColUsers)
                    {
                    <tr>
                        <td>@user.Id.Substring(0, 5) ...</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.PasswordHash</td>
                        <td>
                            <!-- Edit the current forecast -->
                            <button class="btn btn-primary"
                                    @onclick="(() => EditUser(user))">
                                Edit
                            </button>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Uprav User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current user -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                                           placeholder="UserName"
                                           @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text"
                                       placeholder="Email"
                                       @bind="objUser.Email" />
                                <input class="form-control" type="password"
                                       placeholder="Password"
                                       @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                        @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <button class="btn btn-primary"
                                        @onclick="SaveUser">
                                    Uloz
                                </button>
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                            @onclick="DeleteUser">
                                        Zmazat konto
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Pridaj Užívatela</button>
        }
        else
        {
            <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code
 {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        GetUsers();
    }

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Udrzbar", "Skladnik", "Administrators" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;

    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveUser()
    {
    }

    async Task EditUser(IdentityUser _IdentityUser)
    {
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
        GetUsers();
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        /* var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
        */
    }
  
    }